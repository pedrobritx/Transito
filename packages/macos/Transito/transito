#!/usr/bin/env python3

import argparse
import os
import shlex
import subprocess
import sys
from pathlib import Path
from urllib.parse import urlparse

VERSION = "v0.2.0"


def which(bin_name: str) -> str | None:
    """Find executable in PATH."""
    from shutil import which as _which
    return _which(bin_name)


def guess_output_filename(url: str, ext: str = "mp4") -> str:
    """Guess output filename from URL."""
    try:
        path = urlparse(url).path
        base = os.path.basename(path)
        if base.lower().endswith(".m3u8"):
            base = base[:-5]
        if not base:
            base = "video"
        return f"{base}.{ext}"
    except Exception:
        return f"video.{ext}"


def build_ffmpeg_command(url: str, output: str, headers: dict = None) -> list[str]:
    """Build ffmpeg command for HLS download."""
    cmd = [
        "ffmpeg",
        "-hide_banner", "-loglevel", "warning", "-nostdin",
        "-reconnect", "1", "-reconnect_streamed", "1", "-reconnect_delay_max", "30",
        "-i", url,
        "-map", "0:v?", "-map", "0:a?",  # Map only video and audio, skip subtitles
        "-c", "copy",
        "-bsf:a", "aac_adtstoasc",
        "-movflags", "+faststart",
    ]
    
    # Add headers if provided
    if headers:
        header_pairs = []
        if headers.get("User-Agent"):
            header_pairs.append(f"User-Agent: {headers['User-Agent']}")
        if headers.get("Referer"):
            header_pairs.append(f"Referer: {headers['Referer']}")
        if header_pairs:
            cmd.extend(["-headers", "\\r\\n".join(header_pairs) + "\\r\\n"])
    
    cmd.append(output)
    return cmd


def run_ffmpeg_with_progress(cmd: list[str], progress_callback=None) -> int:
    """Run ffmpeg command and optionally report progress."""
    if progress_callback:
        # Add progress reporting
        cmd.extend(["-progress", "pipe:1"])
        
        proc = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            bufsize=1,
        )
        
        # Read progress from stdout
        if proc.stdout:
            for line in proc.stdout:
                line = line.strip()
                if line.startswith("out_time_ms="):
                    try:
                        out_ms = int(line.split("=", 1)[1]) // 1000
                        progress_callback(out_ms)
                    except Exception:
                        pass
        
        # Read errors from stderr
        if proc.stderr:
            for line in proc.stderr:
                sys.stderr.write(line)
        
        return proc.wait()
    else:
        # Simple execution without progress
        proc = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, text=True)
        try:
            for line in proc.stdout:
                sys.stdout.write(line)
        except KeyboardInterrupt:
            proc.terminate()
        return proc.wait()


def download_hls(url: str, output: str = None, headers: dict = None, 
                 progress_callback=None) -> int:
    """Core HLS download logic using ffmpeg."""
    if not output:
        output = guess_output_filename(url)
    
    # Ensure output directory exists
    os.makedirs(os.path.dirname(os.path.abspath(output)), exist_ok=True)
    
    cmd = build_ffmpeg_command(url, output, headers)
    return run_ffmpeg_with_progress(cmd, progress_callback)


def main():
    parser = argparse.ArgumentParser(
        description="Transito - HLS Downloader CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  transito https://example.com/playlist.m3u8
  transito https://example.com/playlist.m3u8 output.mp4
  transito --user-agent "Custom UA" --referer "https://ref.com" https://example.com/playlist.m3u8
        """
    )
    parser.add_argument('url', help='M3U8 playlist URL')
    parser.add_argument('output', nargs='?', help='Output filename (default: guessed from URL)')
    parser.add_argument('--user-agent', help='Custom User-Agent header')
    parser.add_argument('--referer', help='Custom Referer header')
    parser.add_argument('--progress', action='store_true', help='Show progress output')
    parser.add_argument('--dry-run', action='store_true', help='Show command without executing')
    parser.add_argument('--version', action='version', version=f'Transito {VERSION}')
    
    args = parser.parse_args()
    
    # Check if ffmpeg is available
    if which('ffmpeg') is None:
        print('Error: ffmpeg not found. Install it with: brew install ffmpeg', file=sys.stderr)
        sys.exit(1)
    
    if not args.output:
        args.output = guess_output_filename(args.url)
    
    headers = {}
    if args.user_agent:
        headers['User-Agent'] = args.user_agent
    if args.referer:
        headers['Referer'] = args.referer
    
    cmd = build_ffmpeg_command(args.url, args.output, headers)
    pretty_cmd = ' '.join(shlex.quote(x) for x in cmd)
    
    print(f'Transito {VERSION} — Writing to: {args.output}')
    print(f'Transito {VERSION} — Running: {pretty_cmd}')
    
    if args.dry_run:
        return 0
    
    def progress_callback(out_ms: int):
        if args.progress:
            print(f"Progress: {out_ms}ms", file=sys.stderr)
    
    code = download_hls(args.url, args.output, headers, 
                       progress_callback if args.progress else None)
    
    if code == 0:
        print(f"\n✅ Done: {args.output}")
    else:
        print(f"\n❌ ffmpeg exited with code {code}", file=sys.stderr)
        sys.exit(code)


if __name__ == '__main__':
    main()
